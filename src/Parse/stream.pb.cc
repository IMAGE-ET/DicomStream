// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* FrameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeriesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeriesRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SeriesRequest_RequestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SeriesRequest_Priority_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FrameHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameFragment_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stream_2eproto() {
  protobuf_AddDesc_stream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stream.proto");
  GOOGLE_CHECK(file != NULL);
  FrameRequest_descriptor_ = file->message_type(0);
  static const int FrameRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, instanceuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, instanceuidnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, framenumber_),
  };
  FrameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameRequest_descriptor_,
      FrameRequest::default_instance_,
      FrameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameRequest));
  SeriesRequest_descriptor_ = file->message_type(1);
  static const int SeriesRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, studyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, studyuidnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, seriesuidnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, instanceuidprefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, frames_),
  };
  SeriesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeriesRequest_descriptor_,
      SeriesRequest::default_instance_,
      SeriesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeriesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeriesRequest));
  SeriesRequest_RequestType_descriptor_ = SeriesRequest_descriptor_->enum_type(0);
  SeriesRequest_Priority_descriptor_ = SeriesRequest_descriptor_->enum_type(1);
  FrameHeader_descriptor_ = file->message_type(2);
  static const int FrameHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHeader, pixeldatasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHeader, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHeader, height_),
  };
  FrameHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameHeader_descriptor_,
      FrameHeader::default_instance_,
      FrameHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameHeader));
  FrameResponse_descriptor_ = file->message_type(3);
  static const int FrameResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, framerequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, frameheader_),
  };
  FrameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameResponse_descriptor_,
      FrameResponse::default_instance_,
      FrameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameResponse));
  FrameFragment_descriptor_ = file->message_type(4);
  static const int FrameFragment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragment, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragment, size_),
  };
  FrameFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameFragment_descriptor_,
      FrameFragment::default_instance_,
      FrameFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameFragment));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameRequest_descriptor_, &FrameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeriesRequest_descriptor_, &SeriesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameHeader_descriptor_, &FrameHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameResponse_descriptor_, &FrameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameFragment_descriptor_, &FrameFragment::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stream_2eproto() {
  delete FrameRequest::default_instance_;
  delete FrameRequest_reflection_;
  delete SeriesRequest::default_instance_;
  delete SeriesRequest_reflection_;
  delete FrameHeader::default_instance_;
  delete FrameHeader_reflection_;
  delete FrameResponse::default_instance_;
  delete FrameResponse_reflection_;
  delete FrameFragment::default_instance_;
  delete FrameFragment_reflection_;
}

void protobuf_AddDesc_stream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014stream.proto\022\010Protocol\"S\n\014FrameRequest"
    "\022\023\n\013instanceUid\030\001 \002(\t\022\031\n\021instanceUidNumb"
    "er\030\002 \002(\r\022\023\n\013frameNumber\030\003 \001(\r\"\222\003\n\rSeries"
    "Request\0221\n\004type\030\001 \002(\0162#.Protocol.SeriesR"
    "equest.RequestType\022\020\n\010studyUid\030\002 \002(\t\022\026\n\016"
    "studyUidNumber\030\003 \002(\r\022\021\n\tseriesUid\030\004 \002(\t\022"
    "\027\n\017seriesUidNumber\030\005 \002(\r\0222\n\010priority\030\006 \002"
    "(\0162 .Protocol.SeriesRequest.Priority\022\031\n\021"
    "instanceUidPrefix\030\007 \002(\t\022&\n\006frames\030\010 \003(\0132"
    "\026.Protocol.FrameRequest\"N\n\013RequestType\022\t"
    "\n\005Fetch\020\000\022\023\n\017PriorityChanged\020\001\022\023\n\017SetPri"
    "maryFrame\020\002\022\n\n\006Cancel\020\003\"1\n\010Priority\022\014\n\010S"
    "elected\020\000\022\013\n\007Visible\020\001\022\n\n\006Hidden\020\002\"C\n\013Fr"
    "ameHeader\022\025\n\rpixelDataSize\030\001 \002(\r\022\r\n\005widt"
    "h\030\002 \002(\r\022\016\n\006height\030\003 \002(\r\"i\n\rFrameResponse"
    "\022,\n\014frameRequest\030\001 \002(\0132\026.Protocol.FrameR"
    "equest\022*\n\013frameHeader\030\002 \002(\0132\025.Protocol.F"
    "rameHeader\"-\n\rFrameFragment\022\016\n\006offset\030\001 "
    "\002(\r\022\014\n\004size\030\002 \002(\r", 737);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stream.proto", &protobuf_RegisterTypes);
  FrameRequest::default_instance_ = new FrameRequest();
  SeriesRequest::default_instance_ = new SeriesRequest();
  FrameHeader::default_instance_ = new FrameHeader();
  FrameResponse::default_instance_ = new FrameResponse();
  FrameFragment::default_instance_ = new FrameFragment();
  FrameRequest::default_instance_->InitAsDefaultInstance();
  SeriesRequest::default_instance_->InitAsDefaultInstance();
  FrameHeader::default_instance_->InitAsDefaultInstance();
  FrameResponse::default_instance_->InitAsDefaultInstance();
  FrameFragment::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stream_2eproto {
  StaticDescriptorInitializer_stream_2eproto() {
    protobuf_AddDesc_stream_2eproto();
  }
} static_descriptor_initializer_stream_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int FrameRequest::kInstanceUidFieldNumber;
const int FrameRequest::kInstanceUidNumberFieldNumber;
const int FrameRequest::kFrameNumberFieldNumber;
#endif  // !_MSC_VER

FrameRequest::FrameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameRequest::InitAsDefaultInstance() {
}

FrameRequest::FrameRequest(const FrameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameRequest::SharedCtor() {
  _cached_size_ = 0;
  instanceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instanceuidnumber_ = 0u;
  framenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameRequest::~FrameRequest() {
  SharedDtor();
}

void FrameRequest::SharedDtor() {
  if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceuid_;
  }
  if (this != default_instance_) {
  }
}

void FrameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameRequest_descriptor_;
}

const FrameRequest& FrameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameRequest* FrameRequest::default_instance_ = NULL;

FrameRequest* FrameRequest::New() const {
  return new FrameRequest;
}

void FrameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instanceuid()) {
      if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
        instanceuid_->clear();
      }
    }
    instanceuidnumber_ = 0u;
    framenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string instanceUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceuid().data(), this->instanceuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceUidNumber;
        break;
      }
      
      // required uint32 instanceUidNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceUidNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceuidnumber_)));
          set_has_instanceuidnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameNumber;
        break;
      }
      
      // optional uint32 frameNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string instanceUid = 1;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instanceuid(), output);
  }
  
  // required uint32 instanceUidNumber = 2;
  if (has_instanceuidnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->instanceuidnumber(), output);
  }
  
  // optional uint32 frameNumber = 3;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->framenumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string instanceUid = 1;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instanceuid(), target);
  }
  
  // required uint32 instanceUidNumber = 2;
  if (has_instanceuidnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->instanceuidnumber(), target);
  }
  
  // optional uint32 frameNumber = 3;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->framenumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string instanceUid = 1;
    if (has_instanceuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceuid());
    }
    
    // required uint32 instanceUidNumber = 2;
    if (has_instanceuidnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceuidnumber());
    }
    
    // optional uint32 frameNumber = 3;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framenumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameRequest::MergeFrom(const FrameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceuid()) {
      set_instanceuid(from.instanceuid());
    }
    if (from.has_instanceuidnumber()) {
      set_instanceuidnumber(from.instanceuidnumber());
    }
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameRequest::CopyFrom(const FrameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameRequest::Swap(FrameRequest* other) {
  if (other != this) {
    std::swap(instanceuid_, other->instanceuid_);
    std::swap(instanceuidnumber_, other->instanceuidnumber_);
    std::swap(framenumber_, other->framenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameRequest_descriptor_;
  metadata.reflection = FrameRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SeriesRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesRequest_RequestType_descriptor_;
}
bool SeriesRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SeriesRequest_RequestType SeriesRequest::Fetch;
const SeriesRequest_RequestType SeriesRequest::PriorityChanged;
const SeriesRequest_RequestType SeriesRequest::SetPrimaryFrame;
const SeriesRequest_RequestType SeriesRequest::Cancel;
const SeriesRequest_RequestType SeriesRequest::RequestType_MIN;
const SeriesRequest_RequestType SeriesRequest::RequestType_MAX;
const int SeriesRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SeriesRequest_Priority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesRequest_Priority_descriptor_;
}
bool SeriesRequest_Priority_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SeriesRequest_Priority SeriesRequest::Selected;
const SeriesRequest_Priority SeriesRequest::Visible;
const SeriesRequest_Priority SeriesRequest::Hidden;
const SeriesRequest_Priority SeriesRequest::Priority_MIN;
const SeriesRequest_Priority SeriesRequest::Priority_MAX;
const int SeriesRequest::Priority_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SeriesRequest::kTypeFieldNumber;
const int SeriesRequest::kStudyUidFieldNumber;
const int SeriesRequest::kStudyUidNumberFieldNumber;
const int SeriesRequest::kSeriesUidFieldNumber;
const int SeriesRequest::kSeriesUidNumberFieldNumber;
const int SeriesRequest::kPriorityFieldNumber;
const int SeriesRequest::kInstanceUidPrefixFieldNumber;
const int SeriesRequest::kFramesFieldNumber;
#endif  // !_MSC_VER

SeriesRequest::SeriesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeriesRequest::InitAsDefaultInstance() {
}

SeriesRequest::SeriesRequest(const SeriesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeriesRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  studyuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  studyuidnumber_ = 0u;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuidnumber_ = 0u;
  priority_ = 0;
  instanceuidprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeriesRequest::~SeriesRequest() {
  SharedDtor();
}

void SeriesRequest::SharedDtor() {
  if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
    delete studyuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (instanceuidprefix_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceuidprefix_;
  }
  if (this != default_instance_) {
  }
}

void SeriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeriesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeriesRequest_descriptor_;
}

const SeriesRequest& SeriesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

SeriesRequest* SeriesRequest::default_instance_ = NULL;

SeriesRequest* SeriesRequest::New() const {
  return new SeriesRequest;
}

void SeriesRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_studyuid()) {
      if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
        studyuid_->clear();
      }
    }
    studyuidnumber_ = 0u;
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    seriesuidnumber_ = 0u;
    priority_ = 0;
    if (has_instanceuidprefix()) {
      if (instanceuidprefix_ != &::google::protobuf::internal::kEmptyString) {
        instanceuidprefix_->clear();
      }
    }
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Protocol.SeriesRequest.RequestType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::SeriesRequest_RequestType_IsValid(value)) {
            set_type(static_cast< ::Protocol::SeriesRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_studyUid;
        break;
      }
      
      // required string studyUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_studyUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studyuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studyuid().data(), this->studyuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_studyUidNumber;
        break;
      }
      
      // required uint32 studyUidNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_studyUidNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &studyuidnumber_)));
          set_has_studyuidnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seriesUid;
        break;
      }
      
      // required string seriesUid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seriesUidNumber;
        break;
      }
      
      // required uint32 seriesUidNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesUidNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seriesuidnumber_)));
          set_has_seriesuidnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_priority;
        break;
      }
      
      // required .Protocol.SeriesRequest.Priority priority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::SeriesRequest_Priority_IsValid(value)) {
            set_priority(static_cast< ::Protocol::SeriesRequest_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_instanceUidPrefix;
        break;
      }
      
      // required string instanceUidPrefix = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceUidPrefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceuidprefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceuidprefix().data(), this->instanceuidprefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_frames;
        break;
      }
      
      // repeated .Protocol.FrameRequest frames = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Protocol.SeriesRequest.RequestType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required string studyUid = 2;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->studyuid(), output);
  }
  
  // required uint32 studyUidNumber = 3;
  if (has_studyuidnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->studyuidnumber(), output);
  }
  
  // required string seriesUid = 4;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->seriesuid(), output);
  }
  
  // required uint32 seriesUidNumber = 5;
  if (has_seriesuidnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seriesuidnumber(), output);
  }
  
  // required .Protocol.SeriesRequest.Priority priority = 6;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->priority(), output);
  }
  
  // required string instanceUidPrefix = 7;
  if (has_instanceuidprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuidprefix().data(), this->instanceuidprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->instanceuidprefix(), output);
  }
  
  // repeated .Protocol.FrameRequest frames = 8;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeriesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Protocol.SeriesRequest.RequestType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required string studyUid = 2;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->studyuid(), target);
  }
  
  // required uint32 studyUidNumber = 3;
  if (has_studyuidnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->studyuidnumber(), target);
  }
  
  // required string seriesUid = 4;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->seriesuid(), target);
  }
  
  // required uint32 seriesUidNumber = 5;
  if (has_seriesuidnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seriesuidnumber(), target);
  }
  
  // required .Protocol.SeriesRequest.Priority priority = 6;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->priority(), target);
  }
  
  // required string instanceUidPrefix = 7;
  if (has_instanceuidprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuidprefix().data(), this->instanceuidprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->instanceuidprefix(), target);
  }
  
  // repeated .Protocol.FrameRequest frames = 8;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeriesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Protocol.SeriesRequest.RequestType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string studyUid = 2;
    if (has_studyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studyuid());
    }
    
    // required uint32 studyUidNumber = 3;
    if (has_studyuidnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->studyuidnumber());
    }
    
    // required string seriesUid = 4;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required uint32 seriesUidNumber = 5;
    if (has_seriesuidnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seriesuidnumber());
    }
    
    // required .Protocol.SeriesRequest.Priority priority = 6;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }
    
    // required string instanceUidPrefix = 7;
    if (has_instanceuidprefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceuidprefix());
    }
    
  }
  // repeated .Protocol.FrameRequest frames = 8;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeriesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeriesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeriesRequest::MergeFrom(const SeriesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_studyuid()) {
      set_studyuid(from.studyuid());
    }
    if (from.has_studyuidnumber()) {
      set_studyuidnumber(from.studyuidnumber());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_seriesuidnumber()) {
      set_seriesuidnumber(from.seriesuidnumber());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_instanceuidprefix()) {
      set_instanceuidprefix(from.instanceuidprefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeriesRequest::CopyFrom(const SeriesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeriesRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void SeriesRequest::Swap(SeriesRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(studyuid_, other->studyuid_);
    std::swap(studyuidnumber_, other->studyuidnumber_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(seriesuidnumber_, other->seriesuidnumber_);
    std::swap(priority_, other->priority_);
    std::swap(instanceuidprefix_, other->instanceuidprefix_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeriesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeriesRequest_descriptor_;
  metadata.reflection = SeriesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameHeader::kPixelDataSizeFieldNumber;
const int FrameHeader::kWidthFieldNumber;
const int FrameHeader::kHeightFieldNumber;
#endif  // !_MSC_VER

FrameHeader::FrameHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameHeader::InitAsDefaultInstance() {
}

FrameHeader::FrameHeader(const FrameHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameHeader::SharedCtor() {
  _cached_size_ = 0;
  pixeldatasize_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameHeader::~FrameHeader() {
  SharedDtor();
}

void FrameHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameHeader_descriptor_;
}

const FrameHeader& FrameHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameHeader* FrameHeader::default_instance_ = NULL;

FrameHeader* FrameHeader::New() const {
  return new FrameHeader;
}

void FrameHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pixeldatasize_ = 0u;
    width_ = 0u;
    height_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pixelDataSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pixeldatasize_)));
          set_has_pixeldatasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // required uint32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // required uint32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pixelDataSize = 1;
  if (has_pixeldatasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pixeldatasize(), output);
  }
  
  // required uint32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->width(), output);
  }
  
  // required uint32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pixelDataSize = 1;
  if (has_pixeldatasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pixeldatasize(), target);
  }
  
  // required uint32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->width(), target);
  }
  
  // required uint32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pixelDataSize = 1;
    if (has_pixeldatasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pixeldatasize());
    }
    
    // required uint32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }
    
    // required uint32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameHeader::MergeFrom(const FrameHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pixeldatasize()) {
      set_pixeldatasize(from.pixeldatasize());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameHeader::CopyFrom(const FrameHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void FrameHeader::Swap(FrameHeader* other) {
  if (other != this) {
    std::swap(pixeldatasize_, other->pixeldatasize_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameHeader_descriptor_;
  metadata.reflection = FrameHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameResponse::kFrameRequestFieldNumber;
const int FrameResponse::kFrameHeaderFieldNumber;
#endif  // !_MSC_VER

FrameResponse::FrameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameResponse::InitAsDefaultInstance() {
  framerequest_ = const_cast< ::Protocol::FrameRequest*>(&::Protocol::FrameRequest::default_instance());
  frameheader_ = const_cast< ::Protocol::FrameHeader*>(&::Protocol::FrameHeader::default_instance());
}

FrameResponse::FrameResponse(const FrameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameResponse::SharedCtor() {
  _cached_size_ = 0;
  framerequest_ = NULL;
  frameheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameResponse::~FrameResponse() {
  SharedDtor();
}

void FrameResponse::SharedDtor() {
  if (this != default_instance_) {
    delete framerequest_;
    delete frameheader_;
  }
}

void FrameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameResponse_descriptor_;
}

const FrameResponse& FrameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameResponse* FrameResponse::default_instance_ = NULL;

FrameResponse* FrameResponse::New() const {
  return new FrameResponse;
}

void FrameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framerequest()) {
      if (framerequest_ != NULL) framerequest_->::Protocol::FrameRequest::Clear();
    }
    if (has_frameheader()) {
      if (frameheader_ != NULL) frameheader_->::Protocol::FrameHeader::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Protocol.FrameRequest frameRequest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framerequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frameHeader;
        break;
      }
      
      // required .Protocol.FrameHeader frameHeader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameHeader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frameheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Protocol.FrameRequest frameRequest = 1;
  if (has_framerequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framerequest(), output);
  }
  
  // required .Protocol.FrameHeader frameHeader = 2;
  if (has_frameheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frameheader(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Protocol.FrameRequest frameRequest = 1;
  if (has_framerequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framerequest(), target);
  }
  
  // required .Protocol.FrameHeader frameHeader = 2;
  if (has_frameheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frameheader(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Protocol.FrameRequest frameRequest = 1;
    if (has_framerequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framerequest());
    }
    
    // required .Protocol.FrameHeader frameHeader = 2;
    if (has_frameheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frameheader());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameResponse::MergeFrom(const FrameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framerequest()) {
      mutable_framerequest()->::Protocol::FrameRequest::MergeFrom(from.framerequest());
    }
    if (from.has_frameheader()) {
      mutable_frameheader()->::Protocol::FrameHeader::MergeFrom(from.frameheader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameResponse::CopyFrom(const FrameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_framerequest()) {
    if (!this->framerequest().IsInitialized()) return false;
  }
  if (has_frameheader()) {
    if (!this->frameheader().IsInitialized()) return false;
  }
  return true;
}

void FrameResponse::Swap(FrameResponse* other) {
  if (other != this) {
    std::swap(framerequest_, other->framerequest_);
    std::swap(frameheader_, other->frameheader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameResponse_descriptor_;
  metadata.reflection = FrameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameFragment::kOffsetFieldNumber;
const int FrameFragment::kSizeFieldNumber;
#endif  // !_MSC_VER

FrameFragment::FrameFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameFragment::InitAsDefaultInstance() {
}

FrameFragment::FrameFragment(const FrameFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameFragment::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameFragment::~FrameFragment() {
  SharedDtor();
}

void FrameFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameFragment_descriptor_;
}

const FrameFragment& FrameFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameFragment* FrameFragment::default_instance_ = NULL;

FrameFragment* FrameFragment::New() const {
  return new FrameFragment;
}

void FrameFragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0u;
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameFragment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }
    
    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameFragment::MergeFrom(const FrameFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameFragment::CopyFrom(const FrameFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameFragment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameFragment::Swap(FrameFragment* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameFragment_descriptor_;
  metadata.reflection = FrameFragment_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
