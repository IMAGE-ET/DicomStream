// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* SetPrimaryIndexRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPrimaryIndexRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameGroupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameGroupRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameGroupRequest_Priority_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FrameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FrameResponse_bitDepth_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FrameFragmentHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameFragmentHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stream_2eproto() {
  protobuf_AddDesc_stream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stream.proto");
  GOOGLE_CHECK(file != NULL);
  SetPrimaryIndexRequest_descriptor_ = file->message_type(0);
  static const int SetPrimaryIndexRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPrimaryIndexRequest, studyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPrimaryIndexRequest, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPrimaryIndexRequest, instanceuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPrimaryIndexRequest, primaryindex_),
  };
  SetPrimaryIndexRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPrimaryIndexRequest_descriptor_,
      SetPrimaryIndexRequest::default_instance_,
      SetPrimaryIndexRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPrimaryIndexRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPrimaryIndexRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPrimaryIndexRequest));
  FrameRequest_descriptor_ = file->message_type(1);
  static const int FrameRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, instanceuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, framenumber_),
  };
  FrameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameRequest_descriptor_,
      FrameRequest::default_instance_,
      FrameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameRequest));
  FrameGroupRequest_descriptor_ = file->message_type(2);
  static const int FrameGroupRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroupRequest, studyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroupRequest, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroupRequest, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroupRequest, instanceuidprefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroupRequest, frames_),
  };
  FrameGroupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameGroupRequest_descriptor_,
      FrameGroupRequest::default_instance_,
      FrameGroupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameGroupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameGroupRequest));
  FrameGroupRequest_Priority_descriptor_ = FrameGroupRequest_descriptor_->enum_type(0);
  FrameResponse_descriptor_ = file->message_type(3);
  static const int FrameResponse_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, totalbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, imagesizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, imagesizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, colorspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, transfersyntax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, channelsnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, binterleaved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, b2complement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, allocatedbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, storedbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, highbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, instanceuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, framenumber_),
  };
  FrameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameResponse_descriptor_,
      FrameResponse::default_instance_,
      FrameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameResponse));
  FrameResponse_bitDepth_descriptor_ = FrameResponse_descriptor_->enum_type(0);
  FrameFragmentHeader_descriptor_ = file->message_type(4);
  static const int FrameFragmentHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragmentHeader, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragmentHeader, size_),
  };
  FrameFragmentHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameFragmentHeader_descriptor_,
      FrameFragmentHeader::default_instance_,
      FrameFragmentHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragmentHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameFragmentHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameFragmentHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPrimaryIndexRequest_descriptor_, &SetPrimaryIndexRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameRequest_descriptor_, &FrameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameGroupRequest_descriptor_, &FrameGroupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameResponse_descriptor_, &FrameResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameFragmentHeader_descriptor_, &FrameFragmentHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stream_2eproto() {
  delete SetPrimaryIndexRequest::default_instance_;
  delete SetPrimaryIndexRequest_reflection_;
  delete FrameRequest::default_instance_;
  delete FrameRequest_reflection_;
  delete FrameGroupRequest::default_instance_;
  delete FrameGroupRequest_reflection_;
  delete FrameResponse::default_instance_;
  delete FrameResponse_reflection_;
  delete FrameFragmentHeader::default_instance_;
  delete FrameFragmentHeader_reflection_;
}

void protobuf_AddDesc_stream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014stream.proto\022\010Protocol\"h\n\026SetPrimaryIn"
    "dexRequest\022\020\n\010studyUid\030\001 \002(\t\022\021\n\tseriesUi"
    "d\030\002 \002(\t\022\023\n\013instanceUid\030\003 \002(\t\022\024\n\014primaryI"
    "ndex\030\004 \002(\r\"8\n\014FrameRequest\022\023\n\013instanceUi"
    "d\030\001 \002(\t\022\023\n\013frameNumber\030\002 \002(\r\"\346\001\n\021FrameGr"
    "oupRequest\022\020\n\010studyUid\030\002 \002(\t\022\021\n\tseriesUi"
    "d\030\003 \002(\t\0226\n\010priority\030\004 \002(\0162$.Protocol.Fra"
    "meGroupRequest.Priority\022\031\n\021instanceUidPr"
    "efix\030\005 \002(\t\022&\n\006frames\030\006 \003(\0132\026.Protocol.Fr"
    "ameRequest\"1\n\010Priority\022\014\n\010Selected\020\000\022\013\n\007"
    "Visible\020\001\022\n\n\006Hidden\020\002\"\260\003\n\rFrameResponse\022"
    "\022\n\ntotalBytes\030\001 \002(\r\022\022\n\nimageSizeX\030\002 \002(\r\022"
    "\022\n\nimageSizeY\030\003 \002(\r\022/\n\005depth\030\004 \002(\0162 .Pro"
    "tocol.FrameResponse.bitDepth\022\022\n\ncolorSpa"
    "ce\030\005 \002(\t\022\026\n\016transferSyntax\030\006 \002(\t\022\026\n\016chan"
    "nelsNumber\030\007 \002(\r\022\024\n\014bInterleaved\030\010 \002(\010\022\024"
    "\n\014b2Complement\030\t \002(\010\022\025\n\rallocatedBits\030\n "
    "\002(\r\022\022\n\nstoredBits\030\013 \002(\r\022\017\n\007highBit\030\014 \002(\r"
    "\022\023\n\013instanceUid\030\r \002(\t\022\023\n\013frameNumber\030\016 \002"
    "(\r\"\\\n\010bitDepth\022\013\n\007depthU8\020\000\022\013\n\007depthS8\020\001"
    "\022\014\n\010depthU16\020\002\022\014\n\010depthS16\020\003\022\014\n\010depthU32"
    "\020\004\022\014\n\010depthS32\020\005\"3\n\023FrameFragmentHeader\022"
    "\016\n\006offset\030\001 \002(\r\022\014\n\004size\030\002 \002(\r", 909);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stream.proto", &protobuf_RegisterTypes);
  SetPrimaryIndexRequest::default_instance_ = new SetPrimaryIndexRequest();
  FrameRequest::default_instance_ = new FrameRequest();
  FrameGroupRequest::default_instance_ = new FrameGroupRequest();
  FrameResponse::default_instance_ = new FrameResponse();
  FrameFragmentHeader::default_instance_ = new FrameFragmentHeader();
  SetPrimaryIndexRequest::default_instance_->InitAsDefaultInstance();
  FrameRequest::default_instance_->InitAsDefaultInstance();
  FrameGroupRequest::default_instance_->InitAsDefaultInstance();
  FrameResponse::default_instance_->InitAsDefaultInstance();
  FrameFragmentHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stream_2eproto {
  StaticDescriptorInitializer_stream_2eproto() {
    protobuf_AddDesc_stream_2eproto();
  }
} static_descriptor_initializer_stream_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SetPrimaryIndexRequest::kStudyUidFieldNumber;
const int SetPrimaryIndexRequest::kSeriesUidFieldNumber;
const int SetPrimaryIndexRequest::kInstanceUidFieldNumber;
const int SetPrimaryIndexRequest::kPrimaryIndexFieldNumber;
#endif  // !_MSC_VER

SetPrimaryIndexRequest::SetPrimaryIndexRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPrimaryIndexRequest::InitAsDefaultInstance() {
}

SetPrimaryIndexRequest::SetPrimaryIndexRequest(const SetPrimaryIndexRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPrimaryIndexRequest::SharedCtor() {
  _cached_size_ = 0;
  studyuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instanceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primaryindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPrimaryIndexRequest::~SetPrimaryIndexRequest() {
  SharedDtor();
}

void SetPrimaryIndexRequest::SharedDtor() {
  if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
    delete studyuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceuid_;
  }
  if (this != default_instance_) {
  }
}

void SetPrimaryIndexRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPrimaryIndexRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPrimaryIndexRequest_descriptor_;
}

const SetPrimaryIndexRequest& SetPrimaryIndexRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

SetPrimaryIndexRequest* SetPrimaryIndexRequest::default_instance_ = NULL;

SetPrimaryIndexRequest* SetPrimaryIndexRequest::New() const {
  return new SetPrimaryIndexRequest;
}

void SetPrimaryIndexRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_studyuid()) {
      if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
        studyuid_->clear();
      }
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    if (has_instanceuid()) {
      if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
        instanceuid_->clear();
      }
    }
    primaryindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPrimaryIndexRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string studyUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studyuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studyuid().data(), this->studyuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seriesUid;
        break;
      }
      
      // required string seriesUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_instanceUid;
        break;
      }
      
      // required string instanceUid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceuid().data(), this->instanceuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_primaryIndex;
        break;
      }
      
      // required uint32 primaryIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primaryIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primaryindex_)));
          set_has_primaryindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPrimaryIndexRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string studyUid = 1;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->studyuid(), output);
  }
  
  // required string seriesUid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seriesuid(), output);
  }
  
  // required string instanceUid = 3;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instanceuid(), output);
  }
  
  // required uint32 primaryIndex = 4;
  if (has_primaryindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->primaryindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPrimaryIndexRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string studyUid = 1;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->studyuid(), target);
  }
  
  // required string seriesUid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seriesuid(), target);
  }
  
  // required string instanceUid = 3;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instanceuid(), target);
  }
  
  // required uint32 primaryIndex = 4;
  if (has_primaryindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->primaryindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPrimaryIndexRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string studyUid = 1;
    if (has_studyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studyuid());
    }
    
    // required string seriesUid = 2;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required string instanceUid = 3;
    if (has_instanceuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceuid());
    }
    
    // required uint32 primaryIndex = 4;
    if (has_primaryindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->primaryindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPrimaryIndexRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPrimaryIndexRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPrimaryIndexRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPrimaryIndexRequest::MergeFrom(const SetPrimaryIndexRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_studyuid()) {
      set_studyuid(from.studyuid());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_instanceuid()) {
      set_instanceuid(from.instanceuid());
    }
    if (from.has_primaryindex()) {
      set_primaryindex(from.primaryindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPrimaryIndexRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPrimaryIndexRequest::CopyFrom(const SetPrimaryIndexRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPrimaryIndexRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void SetPrimaryIndexRequest::Swap(SetPrimaryIndexRequest* other) {
  if (other != this) {
    std::swap(studyuid_, other->studyuid_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(instanceuid_, other->instanceuid_);
    std::swap(primaryindex_, other->primaryindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPrimaryIndexRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPrimaryIndexRequest_descriptor_;
  metadata.reflection = SetPrimaryIndexRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameRequest::kInstanceUidFieldNumber;
const int FrameRequest::kFrameNumberFieldNumber;
#endif  // !_MSC_VER

FrameRequest::FrameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameRequest::InitAsDefaultInstance() {
}

FrameRequest::FrameRequest(const FrameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameRequest::SharedCtor() {
  _cached_size_ = 0;
  instanceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  framenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameRequest::~FrameRequest() {
  SharedDtor();
}

void FrameRequest::SharedDtor() {
  if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceuid_;
  }
  if (this != default_instance_) {
  }
}

void FrameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameRequest_descriptor_;
}

const FrameRequest& FrameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameRequest* FrameRequest::default_instance_ = NULL;

FrameRequest* FrameRequest::New() const {
  return new FrameRequest;
}

void FrameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instanceuid()) {
      if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
        instanceuid_->clear();
      }
    }
    framenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string instanceUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceuid().data(), this->instanceuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameNumber;
        break;
      }
      
      // required uint32 frameNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string instanceUid = 1;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instanceuid(), output);
  }
  
  // required uint32 frameNumber = 2;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->framenumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string instanceUid = 1;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instanceuid(), target);
  }
  
  // required uint32 frameNumber = 2;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->framenumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string instanceUid = 1;
    if (has_instanceuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceuid());
    }
    
    // required uint32 frameNumber = 2;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framenumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameRequest::MergeFrom(const FrameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceuid()) {
      set_instanceuid(from.instanceuid());
    }
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameRequest::CopyFrom(const FrameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameRequest::Swap(FrameRequest* other) {
  if (other != this) {
    std::swap(instanceuid_, other->instanceuid_);
    std::swap(framenumber_, other->framenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameRequest_descriptor_;
  metadata.reflection = FrameRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FrameGroupRequest_Priority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameGroupRequest_Priority_descriptor_;
}
bool FrameGroupRequest_Priority_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FrameGroupRequest_Priority FrameGroupRequest::Selected;
const FrameGroupRequest_Priority FrameGroupRequest::Visible;
const FrameGroupRequest_Priority FrameGroupRequest::Hidden;
const FrameGroupRequest_Priority FrameGroupRequest::Priority_MIN;
const FrameGroupRequest_Priority FrameGroupRequest::Priority_MAX;
const int FrameGroupRequest::Priority_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FrameGroupRequest::kStudyUidFieldNumber;
const int FrameGroupRequest::kSeriesUidFieldNumber;
const int FrameGroupRequest::kPriorityFieldNumber;
const int FrameGroupRequest::kInstanceUidPrefixFieldNumber;
const int FrameGroupRequest::kFramesFieldNumber;
#endif  // !_MSC_VER

FrameGroupRequest::FrameGroupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameGroupRequest::InitAsDefaultInstance() {
}

FrameGroupRequest::FrameGroupRequest(const FrameGroupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameGroupRequest::SharedCtor() {
  _cached_size_ = 0;
  studyuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  instanceuidprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameGroupRequest::~FrameGroupRequest() {
  SharedDtor();
}

void FrameGroupRequest::SharedDtor() {
  if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
    delete studyuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (instanceuidprefix_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceuidprefix_;
  }
  if (this != default_instance_) {
  }
}

void FrameGroupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameGroupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameGroupRequest_descriptor_;
}

const FrameGroupRequest& FrameGroupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameGroupRequest* FrameGroupRequest::default_instance_ = NULL;

FrameGroupRequest* FrameGroupRequest::New() const {
  return new FrameGroupRequest;
}

void FrameGroupRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_studyuid()) {
      if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
        studyuid_->clear();
      }
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    priority_ = 0;
    if (has_instanceuidprefix()) {
      if (instanceuidprefix_ != &::google::protobuf::internal::kEmptyString) {
        instanceuidprefix_->clear();
      }
    }
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string studyUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studyuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studyuid().data(), this->studyuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seriesUid;
        break;
      }
      
      // required string seriesUid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priority;
        break;
      }
      
      // required .Protocol.FrameGroupRequest.Priority priority = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::FrameGroupRequest_Priority_IsValid(value)) {
            set_priority(static_cast< ::Protocol::FrameGroupRequest_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_instanceUidPrefix;
        break;
      }
      
      // required string instanceUidPrefix = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceUidPrefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceuidprefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceuidprefix().data(), this->instanceuidprefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_frames;
        break;
      }
      
      // repeated .Protocol.FrameRequest frames = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string studyUid = 2;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->studyuid(), output);
  }
  
  // required string seriesUid = 3;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->seriesuid(), output);
  }
  
  // required .Protocol.FrameGroupRequest.Priority priority = 4;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->priority(), output);
  }
  
  // required string instanceUidPrefix = 5;
  if (has_instanceuidprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuidprefix().data(), this->instanceuidprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->instanceuidprefix(), output);
  }
  
  // repeated .Protocol.FrameRequest frames = 6;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameGroupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string studyUid = 2;
  if (has_studyuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyuid().data(), this->studyuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->studyuid(), target);
  }
  
  // required string seriesUid = 3;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seriesuid(), target);
  }
  
  // required .Protocol.FrameGroupRequest.Priority priority = 4;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->priority(), target);
  }
  
  // required string instanceUidPrefix = 5;
  if (has_instanceuidprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuidprefix().data(), this->instanceuidprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->instanceuidprefix(), target);
  }
  
  // repeated .Protocol.FrameRequest frames = 6;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameGroupRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string studyUid = 2;
    if (has_studyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studyuid());
    }
    
    // required string seriesUid = 3;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required .Protocol.FrameGroupRequest.Priority priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }
    
    // required string instanceUidPrefix = 5;
    if (has_instanceuidprefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceuidprefix());
    }
    
  }
  // repeated .Protocol.FrameRequest frames = 6;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameGroupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameGroupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameGroupRequest::MergeFrom(const FrameGroupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_studyuid()) {
      set_studyuid(from.studyuid());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_instanceuidprefix()) {
      set_instanceuidprefix(from.instanceuidprefix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameGroupRequest::CopyFrom(const FrameGroupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameGroupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void FrameGroupRequest::Swap(FrameGroupRequest* other) {
  if (other != this) {
    std::swap(studyuid_, other->studyuid_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(priority_, other->priority_);
    std::swap(instanceuidprefix_, other->instanceuidprefix_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameGroupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameGroupRequest_descriptor_;
  metadata.reflection = FrameGroupRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FrameResponse_bitDepth_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameResponse_bitDepth_descriptor_;
}
bool FrameResponse_bitDepth_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FrameResponse_bitDepth FrameResponse::depthU8;
const FrameResponse_bitDepth FrameResponse::depthS8;
const FrameResponse_bitDepth FrameResponse::depthU16;
const FrameResponse_bitDepth FrameResponse::depthS16;
const FrameResponse_bitDepth FrameResponse::depthU32;
const FrameResponse_bitDepth FrameResponse::depthS32;
const FrameResponse_bitDepth FrameResponse::bitDepth_MIN;
const FrameResponse_bitDepth FrameResponse::bitDepth_MAX;
const int FrameResponse::bitDepth_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FrameResponse::kTotalBytesFieldNumber;
const int FrameResponse::kImageSizeXFieldNumber;
const int FrameResponse::kImageSizeYFieldNumber;
const int FrameResponse::kDepthFieldNumber;
const int FrameResponse::kColorSpaceFieldNumber;
const int FrameResponse::kTransferSyntaxFieldNumber;
const int FrameResponse::kChannelsNumberFieldNumber;
const int FrameResponse::kBInterleavedFieldNumber;
const int FrameResponse::kB2ComplementFieldNumber;
const int FrameResponse::kAllocatedBitsFieldNumber;
const int FrameResponse::kStoredBitsFieldNumber;
const int FrameResponse::kHighBitFieldNumber;
const int FrameResponse::kInstanceUidFieldNumber;
const int FrameResponse::kFrameNumberFieldNumber;
#endif  // !_MSC_VER

FrameResponse::FrameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameResponse::InitAsDefaultInstance() {
}

FrameResponse::FrameResponse(const FrameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameResponse::SharedCtor() {
  _cached_size_ = 0;
  totalbytes_ = 0u;
  imagesizex_ = 0u;
  imagesizey_ = 0u;
  depth_ = 0;
  colorspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transfersyntax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelsnumber_ = 0u;
  binterleaved_ = false;
  b2complement_ = false;
  allocatedbits_ = 0u;
  storedbits_ = 0u;
  highbit_ = 0u;
  instanceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  framenumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameResponse::~FrameResponse() {
  SharedDtor();
}

void FrameResponse::SharedDtor() {
  if (colorspace_ != &::google::protobuf::internal::kEmptyString) {
    delete colorspace_;
  }
  if (transfersyntax_ != &::google::protobuf::internal::kEmptyString) {
    delete transfersyntax_;
  }
  if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
    delete instanceuid_;
  }
  if (this != default_instance_) {
  }
}

void FrameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameResponse_descriptor_;
}

const FrameResponse& FrameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameResponse* FrameResponse::default_instance_ = NULL;

FrameResponse* FrameResponse::New() const {
  return new FrameResponse;
}

void FrameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalbytes_ = 0u;
    imagesizex_ = 0u;
    imagesizey_ = 0u;
    depth_ = 0;
    if (has_colorspace()) {
      if (colorspace_ != &::google::protobuf::internal::kEmptyString) {
        colorspace_->clear();
      }
    }
    if (has_transfersyntax()) {
      if (transfersyntax_ != &::google::protobuf::internal::kEmptyString) {
        transfersyntax_->clear();
      }
    }
    channelsnumber_ = 0u;
    binterleaved_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    b2complement_ = false;
    allocatedbits_ = 0u;
    storedbits_ = 0u;
    highbit_ = 0u;
    if (has_instanceuid()) {
      if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
        instanceuid_->clear();
      }
    }
    framenumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 totalBytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbytes_)));
          set_has_totalbytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_imageSizeX;
        break;
      }
      
      // required uint32 imageSizeX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagesizex_)));
          set_has_imagesizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_imageSizeY;
        break;
      }
      
      // required uint32 imageSizeY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagesizey_)));
          set_has_imagesizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_depth;
        break;
      }
      
      // required .Protocol.FrameResponse.bitDepth depth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depth:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Protocol::FrameResponse_bitDepth_IsValid(value)) {
            set_depth(static_cast< ::Protocol::FrameResponse_bitDepth >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_colorSpace;
        break;
      }
      
      // required string colorSpace = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colorSpace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colorspace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->colorspace().data(), this->colorspace().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_transferSyntax;
        break;
      }
      
      // required string transferSyntax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transferSyntax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfersyntax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transfersyntax().data(), this->transfersyntax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_channelsNumber;
        break;
      }
      
      // required uint32 channelsNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelsNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelsnumber_)));
          set_has_channelsnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bInterleaved;
        break;
      }
      
      // required bool bInterleaved = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bInterleaved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &binterleaved_)));
          set_has_binterleaved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_b2Complement;
        break;
      }
      
      // required bool b2Complement = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b2Complement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b2complement_)));
          set_has_b2complement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_allocatedBits;
        break;
      }
      
      // required uint32 allocatedBits = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allocatedBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allocatedbits_)));
          set_has_allocatedbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_storedBits;
        break;
      }
      
      // required uint32 storedBits = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storedBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storedbits_)));
          set_has_storedbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_highBit;
        break;
      }
      
      // required uint32 highBit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highbit_)));
          set_has_highbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_instanceUid;
        break;
      }
      
      // required string instanceUid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instanceuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instanceuid().data(), this->instanceuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_frameNumber;
        break;
      }
      
      // required uint32 frameNumber = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 totalBytes = 1;
  if (has_totalbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalbytes(), output);
  }
  
  // required uint32 imageSizeX = 2;
  if (has_imagesizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->imagesizex(), output);
  }
  
  // required uint32 imageSizeY = 3;
  if (has_imagesizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imagesizey(), output);
  }
  
  // required .Protocol.FrameResponse.bitDepth depth = 4;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->depth(), output);
  }
  
  // required string colorSpace = 5;
  if (has_colorspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->colorspace().data(), this->colorspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->colorspace(), output);
  }
  
  // required string transferSyntax = 6;
  if (has_transfersyntax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transfersyntax().data(), this->transfersyntax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->transfersyntax(), output);
  }
  
  // required uint32 channelsNumber = 7;
  if (has_channelsnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->channelsnumber(), output);
  }
  
  // required bool bInterleaved = 8;
  if (has_binterleaved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->binterleaved(), output);
  }
  
  // required bool b2Complement = 9;
  if (has_b2complement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->b2complement(), output);
  }
  
  // required uint32 allocatedBits = 10;
  if (has_allocatedbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->allocatedbits(), output);
  }
  
  // required uint32 storedBits = 11;
  if (has_storedbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->storedbits(), output);
  }
  
  // required uint32 highBit = 12;
  if (has_highbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->highbit(), output);
  }
  
  // required string instanceUid = 13;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->instanceuid(), output);
  }
  
  // required uint32 frameNumber = 14;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->framenumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 totalBytes = 1;
  if (has_totalbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalbytes(), target);
  }
  
  // required uint32 imageSizeX = 2;
  if (has_imagesizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->imagesizex(), target);
  }
  
  // required uint32 imageSizeY = 3;
  if (has_imagesizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imagesizey(), target);
  }
  
  // required .Protocol.FrameResponse.bitDepth depth = 4;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->depth(), target);
  }
  
  // required string colorSpace = 5;
  if (has_colorspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->colorspace().data(), this->colorspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->colorspace(), target);
  }
  
  // required string transferSyntax = 6;
  if (has_transfersyntax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transfersyntax().data(), this->transfersyntax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->transfersyntax(), target);
  }
  
  // required uint32 channelsNumber = 7;
  if (has_channelsnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->channelsnumber(), target);
  }
  
  // required bool bInterleaved = 8;
  if (has_binterleaved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->binterleaved(), target);
  }
  
  // required bool b2Complement = 9;
  if (has_b2complement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->b2complement(), target);
  }
  
  // required uint32 allocatedBits = 10;
  if (has_allocatedbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->allocatedbits(), target);
  }
  
  // required uint32 storedBits = 11;
  if (has_storedbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->storedbits(), target);
  }
  
  // required uint32 highBit = 12;
  if (has_highbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->highbit(), target);
  }
  
  // required string instanceUid = 13;
  if (has_instanceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instanceuid().data(), this->instanceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->instanceuid(), target);
  }
  
  // required uint32 frameNumber = 14;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->framenumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 totalBytes = 1;
    if (has_totalbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalbytes());
    }
    
    // required uint32 imageSizeX = 2;
    if (has_imagesizex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagesizex());
    }
    
    // required uint32 imageSizeY = 3;
    if (has_imagesizey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagesizey());
    }
    
    // required .Protocol.FrameResponse.bitDepth depth = 4;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->depth());
    }
    
    // required string colorSpace = 5;
    if (has_colorspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->colorspace());
    }
    
    // required string transferSyntax = 6;
    if (has_transfersyntax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transfersyntax());
    }
    
    // required uint32 channelsNumber = 7;
    if (has_channelsnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelsnumber());
    }
    
    // required bool bInterleaved = 8;
    if (has_binterleaved()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool b2Complement = 9;
    if (has_b2complement()) {
      total_size += 1 + 1;
    }
    
    // required uint32 allocatedBits = 10;
    if (has_allocatedbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allocatedbits());
    }
    
    // required uint32 storedBits = 11;
    if (has_storedbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storedbits());
    }
    
    // required uint32 highBit = 12;
    if (has_highbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highbit());
    }
    
    // required string instanceUid = 13;
    if (has_instanceuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instanceuid());
    }
    
    // required uint32 frameNumber = 14;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framenumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameResponse::MergeFrom(const FrameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalbytes()) {
      set_totalbytes(from.totalbytes());
    }
    if (from.has_imagesizex()) {
      set_imagesizex(from.imagesizex());
    }
    if (from.has_imagesizey()) {
      set_imagesizey(from.imagesizey());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_colorspace()) {
      set_colorspace(from.colorspace());
    }
    if (from.has_transfersyntax()) {
      set_transfersyntax(from.transfersyntax());
    }
    if (from.has_channelsnumber()) {
      set_channelsnumber(from.channelsnumber());
    }
    if (from.has_binterleaved()) {
      set_binterleaved(from.binterleaved());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_b2complement()) {
      set_b2complement(from.b2complement());
    }
    if (from.has_allocatedbits()) {
      set_allocatedbits(from.allocatedbits());
    }
    if (from.has_storedbits()) {
      set_storedbits(from.storedbits());
    }
    if (from.has_highbit()) {
      set_highbit(from.highbit());
    }
    if (from.has_instanceuid()) {
      set_instanceuid(from.instanceuid());
    }
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameResponse::CopyFrom(const FrameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  
  return true;
}

void FrameResponse::Swap(FrameResponse* other) {
  if (other != this) {
    std::swap(totalbytes_, other->totalbytes_);
    std::swap(imagesizex_, other->imagesizex_);
    std::swap(imagesizey_, other->imagesizey_);
    std::swap(depth_, other->depth_);
    std::swap(colorspace_, other->colorspace_);
    std::swap(transfersyntax_, other->transfersyntax_);
    std::swap(channelsnumber_, other->channelsnumber_);
    std::swap(binterleaved_, other->binterleaved_);
    std::swap(b2complement_, other->b2complement_);
    std::swap(allocatedbits_, other->allocatedbits_);
    std::swap(storedbits_, other->storedbits_);
    std::swap(highbit_, other->highbit_);
    std::swap(instanceuid_, other->instanceuid_);
    std::swap(framenumber_, other->framenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameResponse_descriptor_;
  metadata.reflection = FrameResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameFragmentHeader::kOffsetFieldNumber;
const int FrameFragmentHeader::kSizeFieldNumber;
#endif  // !_MSC_VER

FrameFragmentHeader::FrameFragmentHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameFragmentHeader::InitAsDefaultInstance() {
}

FrameFragmentHeader::FrameFragmentHeader(const FrameFragmentHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameFragmentHeader::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameFragmentHeader::~FrameFragmentHeader() {
  SharedDtor();
}

void FrameFragmentHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameFragmentHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameFragmentHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameFragmentHeader_descriptor_;
}

const FrameFragmentHeader& FrameFragmentHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stream_2eproto();  return *default_instance_;
}

FrameFragmentHeader* FrameFragmentHeader::default_instance_ = NULL;

FrameFragmentHeader* FrameFragmentHeader::New() const {
  return new FrameFragmentHeader;
}

void FrameFragmentHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0u;
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameFragmentHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }
      
      // required uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameFragmentHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameFragmentHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }
  
  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameFragmentHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }
    
    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameFragmentHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameFragmentHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameFragmentHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameFragmentHeader::MergeFrom(const FrameFragmentHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameFragmentHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameFragmentHeader::CopyFrom(const FrameFragmentHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameFragmentHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void FrameFragmentHeader::Swap(FrameFragmentHeader* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameFragmentHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameFragmentHeader_descriptor_;
  metadata.reflection = FrameFragmentHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)
