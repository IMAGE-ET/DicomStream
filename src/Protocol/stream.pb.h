// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

#ifndef PROTOBUF_stream_2eproto__INCLUDED
#define PROTOBUF_stream_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_stream_2eproto();
void protobuf_AssignDesc_stream_2eproto();
void protobuf_ShutdownFile_stream_2eproto();

class SetPriorityRequest;
class SetPrimaryIndexRequest;
class FrameRequest;
class FrameGroupRequest;
class FrameResponse;
class FrameFragmentHeader;

enum FrameResponse_bitDepth {
  FrameResponse_bitDepth_depthU8 = 0,
  FrameResponse_bitDepth_depthS8 = 1,
  FrameResponse_bitDepth_depthU16 = 2,
  FrameResponse_bitDepth_depthS16 = 3,
  FrameResponse_bitDepth_depthU32 = 4,
  FrameResponse_bitDepth_depthS32 = 5
};
bool FrameResponse_bitDepth_IsValid(int value);
const FrameResponse_bitDepth FrameResponse_bitDepth_bitDepth_MIN = FrameResponse_bitDepth_depthU8;
const FrameResponse_bitDepth FrameResponse_bitDepth_bitDepth_MAX = FrameResponse_bitDepth_depthS32;
const int FrameResponse_bitDepth_bitDepth_ARRAYSIZE = FrameResponse_bitDepth_bitDepth_MAX + 1;

const ::google::protobuf::EnumDescriptor* FrameResponse_bitDepth_descriptor();
inline const ::std::string& FrameResponse_bitDepth_Name(FrameResponse_bitDepth value) {
  return ::google::protobuf::internal::NameOfEnum(
    FrameResponse_bitDepth_descriptor(), value);
}
inline bool FrameResponse_bitDepth_Parse(
    const ::std::string& name, FrameResponse_bitDepth* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FrameResponse_bitDepth>(
    FrameResponse_bitDepth_descriptor(), name, value);
}
// ===================================================================

class SetPriorityRequest : public ::google::protobuf::Message {
 public:
  SetPriorityRequest();
  virtual ~SetPriorityRequest();
  
  SetPriorityRequest(const SetPriorityRequest& from);
  
  inline SetPriorityRequest& operator=(const SetPriorityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPriorityRequest& default_instance();
  
  void Swap(SetPriorityRequest* other);
  
  // implements Message ----------------------------------------------
  
  SetPriorityRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetPriorityRequest& from);
  void MergeFrom(const SetPriorityRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string studyUid = 1;
  inline bool has_studyuid() const;
  inline void clear_studyuid();
  static const int kStudyUidFieldNumber = 1;
  inline const ::std::string& studyuid() const;
  inline void set_studyuid(const ::std::string& value);
  inline void set_studyuid(const char* value);
  inline void set_studyuid(const char* value, size_t size);
  inline ::std::string* mutable_studyuid();
  inline ::std::string* release_studyuid();
  
  // required string seriesUid = 2;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUidFieldNumber = 2;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // @@protoc_insertion_point(class_scope:Protocol.SetPriorityRequest)
 private:
  inline void set_has_studyuid();
  inline void clear_has_studyuid();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* studyuid_;
  ::std::string* seriesuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static SetPriorityRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetPrimaryIndexRequest : public ::google::protobuf::Message {
 public:
  SetPrimaryIndexRequest();
  virtual ~SetPrimaryIndexRequest();
  
  SetPrimaryIndexRequest(const SetPrimaryIndexRequest& from);
  
  inline SetPrimaryIndexRequest& operator=(const SetPrimaryIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPrimaryIndexRequest& default_instance();
  
  void Swap(SetPrimaryIndexRequest* other);
  
  // implements Message ----------------------------------------------
  
  SetPrimaryIndexRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetPrimaryIndexRequest& from);
  void MergeFrom(const SetPrimaryIndexRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string studyUid = 1;
  inline bool has_studyuid() const;
  inline void clear_studyuid();
  static const int kStudyUidFieldNumber = 1;
  inline const ::std::string& studyuid() const;
  inline void set_studyuid(const ::std::string& value);
  inline void set_studyuid(const char* value);
  inline void set_studyuid(const char* value, size_t size);
  inline ::std::string* mutable_studyuid();
  inline ::std::string* release_studyuid();
  
  // required string seriesUid = 2;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUidFieldNumber = 2;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // optional string instanceUid = 3;
  inline bool has_instanceuid() const;
  inline void clear_instanceuid();
  static const int kInstanceUidFieldNumber = 3;
  inline const ::std::string& instanceuid() const;
  inline void set_instanceuid(const ::std::string& value);
  inline void set_instanceuid(const char* value);
  inline void set_instanceuid(const char* value, size_t size);
  inline ::std::string* mutable_instanceuid();
  inline ::std::string* release_instanceuid();
  
  // required uint32 primaryIndex = 4;
  inline bool has_primaryindex() const;
  inline void clear_primaryindex();
  static const int kPrimaryIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 primaryindex() const;
  inline void set_primaryindex(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Protocol.SetPrimaryIndexRequest)
 private:
  inline void set_has_studyuid();
  inline void clear_has_studyuid();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_instanceuid();
  inline void clear_has_instanceuid();
  inline void set_has_primaryindex();
  inline void clear_has_primaryindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* studyuid_;
  ::std::string* seriesuid_;
  ::std::string* instanceuid_;
  ::google::protobuf::uint32 primaryindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static SetPrimaryIndexRequest* default_instance_;
};
// -------------------------------------------------------------------

class FrameRequest : public ::google::protobuf::Message {
 public:
  FrameRequest();
  virtual ~FrameRequest();
  
  FrameRequest(const FrameRequest& from);
  
  inline FrameRequest& operator=(const FrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameRequest& default_instance();
  
  void Swap(FrameRequest* other);
  
  // implements Message ----------------------------------------------
  
  FrameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameRequest& from);
  void MergeFrom(const FrameRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string instanceUid = 1;
  inline bool has_instanceuid() const;
  inline void clear_instanceuid();
  static const int kInstanceUidFieldNumber = 1;
  inline const ::std::string& instanceuid() const;
  inline void set_instanceuid(const ::std::string& value);
  inline void set_instanceuid(const char* value);
  inline void set_instanceuid(const char* value, size_t size);
  inline ::std::string* mutable_instanceuid();
  inline ::std::string* release_instanceuid();
  
  // required uint32 frameNumber = 2;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Protocol.FrameRequest)
 private:
  inline void set_has_instanceuid();
  inline void clear_has_instanceuid();
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* instanceuid_;
  ::google::protobuf::uint32 framenumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static FrameRequest* default_instance_;
};
// -------------------------------------------------------------------

class FrameGroupRequest : public ::google::protobuf::Message {
 public:
  FrameGroupRequest();
  virtual ~FrameGroupRequest();
  
  FrameGroupRequest(const FrameGroupRequest& from);
  
  inline FrameGroupRequest& operator=(const FrameGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameGroupRequest& default_instance();
  
  void Swap(FrameGroupRequest* other);
  
  // implements Message ----------------------------------------------
  
  FrameGroupRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameGroupRequest& from);
  void MergeFrom(const FrameGroupRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string studyUid = 1;
  inline bool has_studyuid() const;
  inline void clear_studyuid();
  static const int kStudyUidFieldNumber = 1;
  inline const ::std::string& studyuid() const;
  inline void set_studyuid(const ::std::string& value);
  inline void set_studyuid(const char* value);
  inline void set_studyuid(const char* value, size_t size);
  inline ::std::string* mutable_studyuid();
  inline ::std::string* release_studyuid();
  
  // required string seriesUid = 2;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUidFieldNumber = 2;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required string instanceUidPrefix = 3;
  inline bool has_instanceuidprefix() const;
  inline void clear_instanceuidprefix();
  static const int kInstanceUidPrefixFieldNumber = 3;
  inline const ::std::string& instanceuidprefix() const;
  inline void set_instanceuidprefix(const ::std::string& value);
  inline void set_instanceuidprefix(const char* value);
  inline void set_instanceuidprefix(const char* value, size_t size);
  inline ::std::string* mutable_instanceuidprefix();
  inline ::std::string* release_instanceuidprefix();
  
  // repeated .Protocol.FrameRequest frames = 4;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 4;
  inline const ::Protocol::FrameRequest& frames(int index) const;
  inline ::Protocol::FrameRequest* mutable_frames(int index);
  inline ::Protocol::FrameRequest* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::Protocol::FrameRequest >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::Protocol::FrameRequest >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:Protocol.FrameGroupRequest)
 private:
  inline void set_has_studyuid();
  inline void clear_has_studyuid();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_instanceuidprefix();
  inline void clear_has_instanceuidprefix();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* studyuid_;
  ::std::string* seriesuid_;
  ::std::string* instanceuidprefix_;
  ::google::protobuf::RepeatedPtrField< ::Protocol::FrameRequest > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static FrameGroupRequest* default_instance_;
};
// -------------------------------------------------------------------

class FrameResponse : public ::google::protobuf::Message {
 public:
  FrameResponse();
  virtual ~FrameResponse();
  
  FrameResponse(const FrameResponse& from);
  
  inline FrameResponse& operator=(const FrameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameResponse& default_instance();
  
  void Swap(FrameResponse* other);
  
  // implements Message ----------------------------------------------
  
  FrameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameResponse& from);
  void MergeFrom(const FrameResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef FrameResponse_bitDepth bitDepth;
  static const bitDepth depthU8 = FrameResponse_bitDepth_depthU8;
  static const bitDepth depthS8 = FrameResponse_bitDepth_depthS8;
  static const bitDepth depthU16 = FrameResponse_bitDepth_depthU16;
  static const bitDepth depthS16 = FrameResponse_bitDepth_depthS16;
  static const bitDepth depthU32 = FrameResponse_bitDepth_depthU32;
  static const bitDepth depthS32 = FrameResponse_bitDepth_depthS32;
  static inline bool bitDepth_IsValid(int value) {
    return FrameResponse_bitDepth_IsValid(value);
  }
  static const bitDepth bitDepth_MIN =
    FrameResponse_bitDepth_bitDepth_MIN;
  static const bitDepth bitDepth_MAX =
    FrameResponse_bitDepth_bitDepth_MAX;
  static const int bitDepth_ARRAYSIZE =
    FrameResponse_bitDepth_bitDepth_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  bitDepth_descriptor() {
    return FrameResponse_bitDepth_descriptor();
  }
  static inline const ::std::string& bitDepth_Name(bitDepth value) {
    return FrameResponse_bitDepth_Name(value);
  }
  static inline bool bitDepth_Parse(const ::std::string& name,
      bitDepth* value) {
    return FrameResponse_bitDepth_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 totalBytes = 1;
  inline bool has_totalbytes() const;
  inline void clear_totalbytes();
  static const int kTotalBytesFieldNumber = 1;
  inline ::google::protobuf::uint32 totalbytes() const;
  inline void set_totalbytes(::google::protobuf::uint32 value);
  
  // required uint32 imageSizeX = 2;
  inline bool has_imagesizex() const;
  inline void clear_imagesizex();
  static const int kImageSizeXFieldNumber = 2;
  inline ::google::protobuf::uint32 imagesizex() const;
  inline void set_imagesizex(::google::protobuf::uint32 value);
  
  // required uint32 imageSizeY = 3;
  inline bool has_imagesizey() const;
  inline void clear_imagesizey();
  static const int kImageSizeYFieldNumber = 3;
  inline ::google::protobuf::uint32 imagesizey() const;
  inline void set_imagesizey(::google::protobuf::uint32 value);
  
  // required .Protocol.FrameResponse.bitDepth depth = 4;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 4;
  inline ::Protocol::FrameResponse_bitDepth depth() const;
  inline void set_depth(::Protocol::FrameResponse_bitDepth value);
  
  // required string colorSpace = 5;
  inline bool has_colorspace() const;
  inline void clear_colorspace();
  static const int kColorSpaceFieldNumber = 5;
  inline const ::std::string& colorspace() const;
  inline void set_colorspace(const ::std::string& value);
  inline void set_colorspace(const char* value);
  inline void set_colorspace(const char* value, size_t size);
  inline ::std::string* mutable_colorspace();
  inline ::std::string* release_colorspace();
  
  // required string transferSyntax = 6;
  inline bool has_transfersyntax() const;
  inline void clear_transfersyntax();
  static const int kTransferSyntaxFieldNumber = 6;
  inline const ::std::string& transfersyntax() const;
  inline void set_transfersyntax(const ::std::string& value);
  inline void set_transfersyntax(const char* value);
  inline void set_transfersyntax(const char* value, size_t size);
  inline ::std::string* mutable_transfersyntax();
  inline ::std::string* release_transfersyntax();
  
  // required uint32 channelsNumber = 7;
  inline bool has_channelsnumber() const;
  inline void clear_channelsnumber();
  static const int kChannelsNumberFieldNumber = 7;
  inline ::google::protobuf::uint32 channelsnumber() const;
  inline void set_channelsnumber(::google::protobuf::uint32 value);
  
  // required bool bInterleaved = 8;
  inline bool has_binterleaved() const;
  inline void clear_binterleaved();
  static const int kBInterleavedFieldNumber = 8;
  inline bool binterleaved() const;
  inline void set_binterleaved(bool value);
  
  // required bool b2Complement = 9;
  inline bool has_b2complement() const;
  inline void clear_b2complement();
  static const int kB2ComplementFieldNumber = 9;
  inline bool b2complement() const;
  inline void set_b2complement(bool value);
  
  // required uint32 allocatedBits = 10;
  inline bool has_allocatedbits() const;
  inline void clear_allocatedbits();
  static const int kAllocatedBitsFieldNumber = 10;
  inline ::google::protobuf::uint32 allocatedbits() const;
  inline void set_allocatedbits(::google::protobuf::uint32 value);
  
  // required uint32 storedBits = 11;
  inline bool has_storedbits() const;
  inline void clear_storedbits();
  static const int kStoredBitsFieldNumber = 11;
  inline ::google::protobuf::uint32 storedbits() const;
  inline void set_storedbits(::google::protobuf::uint32 value);
  
  // required uint32 highBit = 12;
  inline bool has_highbit() const;
  inline void clear_highbit();
  static const int kHighBitFieldNumber = 12;
  inline ::google::protobuf::uint32 highbit() const;
  inline void set_highbit(::google::protobuf::uint32 value);
  
  // required string instanceUid = 13;
  inline bool has_instanceuid() const;
  inline void clear_instanceuid();
  static const int kInstanceUidFieldNumber = 13;
  inline const ::std::string& instanceuid() const;
  inline void set_instanceuid(const ::std::string& value);
  inline void set_instanceuid(const char* value);
  inline void set_instanceuid(const char* value, size_t size);
  inline ::std::string* mutable_instanceuid();
  inline ::std::string* release_instanceuid();
  
  // required uint32 frameNumber = 14;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 14;
  inline ::google::protobuf::uint32 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Protocol.FrameResponse)
 private:
  inline void set_has_totalbytes();
  inline void clear_has_totalbytes();
  inline void set_has_imagesizex();
  inline void clear_has_imagesizex();
  inline void set_has_imagesizey();
  inline void clear_has_imagesizey();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_colorspace();
  inline void clear_has_colorspace();
  inline void set_has_transfersyntax();
  inline void clear_has_transfersyntax();
  inline void set_has_channelsnumber();
  inline void clear_has_channelsnumber();
  inline void set_has_binterleaved();
  inline void clear_has_binterleaved();
  inline void set_has_b2complement();
  inline void clear_has_b2complement();
  inline void set_has_allocatedbits();
  inline void clear_has_allocatedbits();
  inline void set_has_storedbits();
  inline void clear_has_storedbits();
  inline void set_has_highbit();
  inline void clear_has_highbit();
  inline void set_has_instanceuid();
  inline void clear_has_instanceuid();
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 totalbytes_;
  ::google::protobuf::uint32 imagesizex_;
  ::google::protobuf::uint32 imagesizey_;
  int depth_;
  ::std::string* colorspace_;
  ::std::string* transfersyntax_;
  ::google::protobuf::uint32 channelsnumber_;
  bool binterleaved_;
  bool b2complement_;
  ::google::protobuf::uint32 allocatedbits_;
  ::google::protobuf::uint32 storedbits_;
  ::std::string* instanceuid_;
  ::google::protobuf::uint32 highbit_;
  ::google::protobuf::uint32 framenumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static FrameResponse* default_instance_;
};
// -------------------------------------------------------------------

class FrameFragmentHeader : public ::google::protobuf::Message {
 public:
  FrameFragmentHeader();
  virtual ~FrameFragmentHeader();
  
  FrameFragmentHeader(const FrameFragmentHeader& from);
  
  inline FrameFragmentHeader& operator=(const FrameFragmentHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameFragmentHeader& default_instance();
  
  void Swap(FrameFragmentHeader* other);
  
  // implements Message ----------------------------------------------
  
  FrameFragmentHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FrameFragmentHeader& from);
  void MergeFrom(const FrameFragmentHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);
  
  // required uint32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Protocol.FrameFragmentHeader)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_size();
  inline void clear_has_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_stream_2eproto();
  friend void protobuf_AssignDesc_stream_2eproto();
  friend void protobuf_ShutdownFile_stream_2eproto();
  
  void InitAsDefaultInstance();
  static FrameFragmentHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// SetPriorityRequest

// required string studyUid = 1;
inline bool SetPriorityRequest::has_studyuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetPriorityRequest::set_has_studyuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetPriorityRequest::clear_has_studyuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetPriorityRequest::clear_studyuid() {
  if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
    studyuid_->clear();
  }
  clear_has_studyuid();
}
inline const ::std::string& SetPriorityRequest::studyuid() const {
  return *studyuid_;
}
inline void SetPriorityRequest::set_studyuid(const ::std::string& value) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(value);
}
inline void SetPriorityRequest::set_studyuid(const char* value) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(value);
}
inline void SetPriorityRequest::set_studyuid(const char* value, size_t size) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetPriorityRequest::mutable_studyuid() {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  return studyuid_;
}
inline ::std::string* SetPriorityRequest::release_studyuid() {
  clear_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = studyuid_;
    studyuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string seriesUid = 2;
inline bool SetPriorityRequest::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetPriorityRequest::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetPriorityRequest::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetPriorityRequest::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& SetPriorityRequest::seriesuid() const {
  return *seriesuid_;
}
inline void SetPriorityRequest::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void SetPriorityRequest::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void SetPriorityRequest::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetPriorityRequest::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* SetPriorityRequest::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SetPrimaryIndexRequest

// required string studyUid = 1;
inline bool SetPrimaryIndexRequest::has_studyuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetPrimaryIndexRequest::set_has_studyuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetPrimaryIndexRequest::clear_has_studyuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetPrimaryIndexRequest::clear_studyuid() {
  if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
    studyuid_->clear();
  }
  clear_has_studyuid();
}
inline const ::std::string& SetPrimaryIndexRequest::studyuid() const {
  return *studyuid_;
}
inline void SetPrimaryIndexRequest::set_studyuid(const ::std::string& value) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(value);
}
inline void SetPrimaryIndexRequest::set_studyuid(const char* value) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(value);
}
inline void SetPrimaryIndexRequest::set_studyuid(const char* value, size_t size) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetPrimaryIndexRequest::mutable_studyuid() {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  return studyuid_;
}
inline ::std::string* SetPrimaryIndexRequest::release_studyuid() {
  clear_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = studyuid_;
    studyuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string seriesUid = 2;
inline bool SetPrimaryIndexRequest::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetPrimaryIndexRequest::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetPrimaryIndexRequest::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetPrimaryIndexRequest::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& SetPrimaryIndexRequest::seriesuid() const {
  return *seriesuid_;
}
inline void SetPrimaryIndexRequest::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void SetPrimaryIndexRequest::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void SetPrimaryIndexRequest::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetPrimaryIndexRequest::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* SetPrimaryIndexRequest::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string instanceUid = 3;
inline bool SetPrimaryIndexRequest::has_instanceuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetPrimaryIndexRequest::set_has_instanceuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetPrimaryIndexRequest::clear_has_instanceuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetPrimaryIndexRequest::clear_instanceuid() {
  if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
    instanceuid_->clear();
  }
  clear_has_instanceuid();
}
inline const ::std::string& SetPrimaryIndexRequest::instanceuid() const {
  return *instanceuid_;
}
inline void SetPrimaryIndexRequest::set_instanceuid(const ::std::string& value) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(value);
}
inline void SetPrimaryIndexRequest::set_instanceuid(const char* value) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(value);
}
inline void SetPrimaryIndexRequest::set_instanceuid(const char* value, size_t size) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetPrimaryIndexRequest::mutable_instanceuid() {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  return instanceuid_;
}
inline ::std::string* SetPrimaryIndexRequest::release_instanceuid() {
  clear_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceuid_;
    instanceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 primaryIndex = 4;
inline bool SetPrimaryIndexRequest::has_primaryindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SetPrimaryIndexRequest::set_has_primaryindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SetPrimaryIndexRequest::clear_has_primaryindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SetPrimaryIndexRequest::clear_primaryindex() {
  primaryindex_ = 0u;
  clear_has_primaryindex();
}
inline ::google::protobuf::uint32 SetPrimaryIndexRequest::primaryindex() const {
  return primaryindex_;
}
inline void SetPrimaryIndexRequest::set_primaryindex(::google::protobuf::uint32 value) {
  set_has_primaryindex();
  primaryindex_ = value;
}

// -------------------------------------------------------------------

// FrameRequest

// required string instanceUid = 1;
inline bool FrameRequest::has_instanceuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameRequest::set_has_instanceuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameRequest::clear_has_instanceuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameRequest::clear_instanceuid() {
  if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
    instanceuid_->clear();
  }
  clear_has_instanceuid();
}
inline const ::std::string& FrameRequest::instanceuid() const {
  return *instanceuid_;
}
inline void FrameRequest::set_instanceuid(const ::std::string& value) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(value);
}
inline void FrameRequest::set_instanceuid(const char* value) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(value);
}
inline void FrameRequest::set_instanceuid(const char* value, size_t size) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameRequest::mutable_instanceuid() {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  return instanceuid_;
}
inline ::std::string* FrameRequest::release_instanceuid() {
  clear_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceuid_;
    instanceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 frameNumber = 2;
inline bool FrameRequest::has_framenumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameRequest::set_has_framenumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameRequest::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameRequest::clear_framenumber() {
  framenumber_ = 0u;
  clear_has_framenumber();
}
inline ::google::protobuf::uint32 FrameRequest::framenumber() const {
  return framenumber_;
}
inline void FrameRequest::set_framenumber(::google::protobuf::uint32 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// -------------------------------------------------------------------

// FrameGroupRequest

// required string studyUid = 1;
inline bool FrameGroupRequest::has_studyuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameGroupRequest::set_has_studyuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameGroupRequest::clear_has_studyuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameGroupRequest::clear_studyuid() {
  if (studyuid_ != &::google::protobuf::internal::kEmptyString) {
    studyuid_->clear();
  }
  clear_has_studyuid();
}
inline const ::std::string& FrameGroupRequest::studyuid() const {
  return *studyuid_;
}
inline void FrameGroupRequest::set_studyuid(const ::std::string& value) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(value);
}
inline void FrameGroupRequest::set_studyuid(const char* value) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(value);
}
inline void FrameGroupRequest::set_studyuid(const char* value, size_t size) {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  studyuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameGroupRequest::mutable_studyuid() {
  set_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    studyuid_ = new ::std::string;
  }
  return studyuid_;
}
inline ::std::string* FrameGroupRequest::release_studyuid() {
  clear_has_studyuid();
  if (studyuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = studyuid_;
    studyuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string seriesUid = 2;
inline bool FrameGroupRequest::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameGroupRequest::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameGroupRequest::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameGroupRequest::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& FrameGroupRequest::seriesuid() const {
  return *seriesuid_;
}
inline void FrameGroupRequest::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void FrameGroupRequest::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void FrameGroupRequest::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameGroupRequest::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* FrameGroupRequest::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string instanceUidPrefix = 3;
inline bool FrameGroupRequest::has_instanceuidprefix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameGroupRequest::set_has_instanceuidprefix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameGroupRequest::clear_has_instanceuidprefix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameGroupRequest::clear_instanceuidprefix() {
  if (instanceuidprefix_ != &::google::protobuf::internal::kEmptyString) {
    instanceuidprefix_->clear();
  }
  clear_has_instanceuidprefix();
}
inline const ::std::string& FrameGroupRequest::instanceuidprefix() const {
  return *instanceuidprefix_;
}
inline void FrameGroupRequest::set_instanceuidprefix(const ::std::string& value) {
  set_has_instanceuidprefix();
  if (instanceuidprefix_ == &::google::protobuf::internal::kEmptyString) {
    instanceuidprefix_ = new ::std::string;
  }
  instanceuidprefix_->assign(value);
}
inline void FrameGroupRequest::set_instanceuidprefix(const char* value) {
  set_has_instanceuidprefix();
  if (instanceuidprefix_ == &::google::protobuf::internal::kEmptyString) {
    instanceuidprefix_ = new ::std::string;
  }
  instanceuidprefix_->assign(value);
}
inline void FrameGroupRequest::set_instanceuidprefix(const char* value, size_t size) {
  set_has_instanceuidprefix();
  if (instanceuidprefix_ == &::google::protobuf::internal::kEmptyString) {
    instanceuidprefix_ = new ::std::string;
  }
  instanceuidprefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameGroupRequest::mutable_instanceuidprefix() {
  set_has_instanceuidprefix();
  if (instanceuidprefix_ == &::google::protobuf::internal::kEmptyString) {
    instanceuidprefix_ = new ::std::string;
  }
  return instanceuidprefix_;
}
inline ::std::string* FrameGroupRequest::release_instanceuidprefix() {
  clear_has_instanceuidprefix();
  if (instanceuidprefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceuidprefix_;
    instanceuidprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Protocol.FrameRequest frames = 4;
inline int FrameGroupRequest::frames_size() const {
  return frames_.size();
}
inline void FrameGroupRequest::clear_frames() {
  frames_.Clear();
}
inline const ::Protocol::FrameRequest& FrameGroupRequest::frames(int index) const {
  return frames_.Get(index);
}
inline ::Protocol::FrameRequest* FrameGroupRequest::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::Protocol::FrameRequest* FrameGroupRequest::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Protocol::FrameRequest >&
FrameGroupRequest::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::Protocol::FrameRequest >*
FrameGroupRequest::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// FrameResponse

// required uint32 totalBytes = 1;
inline bool FrameResponse::has_totalbytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameResponse::set_has_totalbytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameResponse::clear_has_totalbytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameResponse::clear_totalbytes() {
  totalbytes_ = 0u;
  clear_has_totalbytes();
}
inline ::google::protobuf::uint32 FrameResponse::totalbytes() const {
  return totalbytes_;
}
inline void FrameResponse::set_totalbytes(::google::protobuf::uint32 value) {
  set_has_totalbytes();
  totalbytes_ = value;
}

// required uint32 imageSizeX = 2;
inline bool FrameResponse::has_imagesizex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameResponse::set_has_imagesizex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameResponse::clear_has_imagesizex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameResponse::clear_imagesizex() {
  imagesizex_ = 0u;
  clear_has_imagesizex();
}
inline ::google::protobuf::uint32 FrameResponse::imagesizex() const {
  return imagesizex_;
}
inline void FrameResponse::set_imagesizex(::google::protobuf::uint32 value) {
  set_has_imagesizex();
  imagesizex_ = value;
}

// required uint32 imageSizeY = 3;
inline bool FrameResponse::has_imagesizey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FrameResponse::set_has_imagesizey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FrameResponse::clear_has_imagesizey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FrameResponse::clear_imagesizey() {
  imagesizey_ = 0u;
  clear_has_imagesizey();
}
inline ::google::protobuf::uint32 FrameResponse::imagesizey() const {
  return imagesizey_;
}
inline void FrameResponse::set_imagesizey(::google::protobuf::uint32 value) {
  set_has_imagesizey();
  imagesizey_ = value;
}

// required .Protocol.FrameResponse.bitDepth depth = 4;
inline bool FrameResponse::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FrameResponse::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FrameResponse::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FrameResponse::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline ::Protocol::FrameResponse_bitDepth FrameResponse::depth() const {
  return static_cast< ::Protocol::FrameResponse_bitDepth >(depth_);
}
inline void FrameResponse::set_depth(::Protocol::FrameResponse_bitDepth value) {
  GOOGLE_DCHECK(::Protocol::FrameResponse_bitDepth_IsValid(value));
  set_has_depth();
  depth_ = value;
}

// required string colorSpace = 5;
inline bool FrameResponse::has_colorspace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FrameResponse::set_has_colorspace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FrameResponse::clear_has_colorspace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FrameResponse::clear_colorspace() {
  if (colorspace_ != &::google::protobuf::internal::kEmptyString) {
    colorspace_->clear();
  }
  clear_has_colorspace();
}
inline const ::std::string& FrameResponse::colorspace() const {
  return *colorspace_;
}
inline void FrameResponse::set_colorspace(const ::std::string& value) {
  set_has_colorspace();
  if (colorspace_ == &::google::protobuf::internal::kEmptyString) {
    colorspace_ = new ::std::string;
  }
  colorspace_->assign(value);
}
inline void FrameResponse::set_colorspace(const char* value) {
  set_has_colorspace();
  if (colorspace_ == &::google::protobuf::internal::kEmptyString) {
    colorspace_ = new ::std::string;
  }
  colorspace_->assign(value);
}
inline void FrameResponse::set_colorspace(const char* value, size_t size) {
  set_has_colorspace();
  if (colorspace_ == &::google::protobuf::internal::kEmptyString) {
    colorspace_ = new ::std::string;
  }
  colorspace_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameResponse::mutable_colorspace() {
  set_has_colorspace();
  if (colorspace_ == &::google::protobuf::internal::kEmptyString) {
    colorspace_ = new ::std::string;
  }
  return colorspace_;
}
inline ::std::string* FrameResponse::release_colorspace() {
  clear_has_colorspace();
  if (colorspace_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = colorspace_;
    colorspace_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string transferSyntax = 6;
inline bool FrameResponse::has_transfersyntax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FrameResponse::set_has_transfersyntax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FrameResponse::clear_has_transfersyntax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FrameResponse::clear_transfersyntax() {
  if (transfersyntax_ != &::google::protobuf::internal::kEmptyString) {
    transfersyntax_->clear();
  }
  clear_has_transfersyntax();
}
inline const ::std::string& FrameResponse::transfersyntax() const {
  return *transfersyntax_;
}
inline void FrameResponse::set_transfersyntax(const ::std::string& value) {
  set_has_transfersyntax();
  if (transfersyntax_ == &::google::protobuf::internal::kEmptyString) {
    transfersyntax_ = new ::std::string;
  }
  transfersyntax_->assign(value);
}
inline void FrameResponse::set_transfersyntax(const char* value) {
  set_has_transfersyntax();
  if (transfersyntax_ == &::google::protobuf::internal::kEmptyString) {
    transfersyntax_ = new ::std::string;
  }
  transfersyntax_->assign(value);
}
inline void FrameResponse::set_transfersyntax(const char* value, size_t size) {
  set_has_transfersyntax();
  if (transfersyntax_ == &::google::protobuf::internal::kEmptyString) {
    transfersyntax_ = new ::std::string;
  }
  transfersyntax_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameResponse::mutable_transfersyntax() {
  set_has_transfersyntax();
  if (transfersyntax_ == &::google::protobuf::internal::kEmptyString) {
    transfersyntax_ = new ::std::string;
  }
  return transfersyntax_;
}
inline ::std::string* FrameResponse::release_transfersyntax() {
  clear_has_transfersyntax();
  if (transfersyntax_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transfersyntax_;
    transfersyntax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 channelsNumber = 7;
inline bool FrameResponse::has_channelsnumber() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FrameResponse::set_has_channelsnumber() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FrameResponse::clear_has_channelsnumber() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FrameResponse::clear_channelsnumber() {
  channelsnumber_ = 0u;
  clear_has_channelsnumber();
}
inline ::google::protobuf::uint32 FrameResponse::channelsnumber() const {
  return channelsnumber_;
}
inline void FrameResponse::set_channelsnumber(::google::protobuf::uint32 value) {
  set_has_channelsnumber();
  channelsnumber_ = value;
}

// required bool bInterleaved = 8;
inline bool FrameResponse::has_binterleaved() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FrameResponse::set_has_binterleaved() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FrameResponse::clear_has_binterleaved() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FrameResponse::clear_binterleaved() {
  binterleaved_ = false;
  clear_has_binterleaved();
}
inline bool FrameResponse::binterleaved() const {
  return binterleaved_;
}
inline void FrameResponse::set_binterleaved(bool value) {
  set_has_binterleaved();
  binterleaved_ = value;
}

// required bool b2Complement = 9;
inline bool FrameResponse::has_b2complement() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FrameResponse::set_has_b2complement() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FrameResponse::clear_has_b2complement() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FrameResponse::clear_b2complement() {
  b2complement_ = false;
  clear_has_b2complement();
}
inline bool FrameResponse::b2complement() const {
  return b2complement_;
}
inline void FrameResponse::set_b2complement(bool value) {
  set_has_b2complement();
  b2complement_ = value;
}

// required uint32 allocatedBits = 10;
inline bool FrameResponse::has_allocatedbits() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FrameResponse::set_has_allocatedbits() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FrameResponse::clear_has_allocatedbits() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FrameResponse::clear_allocatedbits() {
  allocatedbits_ = 0u;
  clear_has_allocatedbits();
}
inline ::google::protobuf::uint32 FrameResponse::allocatedbits() const {
  return allocatedbits_;
}
inline void FrameResponse::set_allocatedbits(::google::protobuf::uint32 value) {
  set_has_allocatedbits();
  allocatedbits_ = value;
}

// required uint32 storedBits = 11;
inline bool FrameResponse::has_storedbits() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FrameResponse::set_has_storedbits() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FrameResponse::clear_has_storedbits() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FrameResponse::clear_storedbits() {
  storedbits_ = 0u;
  clear_has_storedbits();
}
inline ::google::protobuf::uint32 FrameResponse::storedbits() const {
  return storedbits_;
}
inline void FrameResponse::set_storedbits(::google::protobuf::uint32 value) {
  set_has_storedbits();
  storedbits_ = value;
}

// required uint32 highBit = 12;
inline bool FrameResponse::has_highbit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FrameResponse::set_has_highbit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FrameResponse::clear_has_highbit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FrameResponse::clear_highbit() {
  highbit_ = 0u;
  clear_has_highbit();
}
inline ::google::protobuf::uint32 FrameResponse::highbit() const {
  return highbit_;
}
inline void FrameResponse::set_highbit(::google::protobuf::uint32 value) {
  set_has_highbit();
  highbit_ = value;
}

// required string instanceUid = 13;
inline bool FrameResponse::has_instanceuid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FrameResponse::set_has_instanceuid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FrameResponse::clear_has_instanceuid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FrameResponse::clear_instanceuid() {
  if (instanceuid_ != &::google::protobuf::internal::kEmptyString) {
    instanceuid_->clear();
  }
  clear_has_instanceuid();
}
inline const ::std::string& FrameResponse::instanceuid() const {
  return *instanceuid_;
}
inline void FrameResponse::set_instanceuid(const ::std::string& value) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(value);
}
inline void FrameResponse::set_instanceuid(const char* value) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(value);
}
inline void FrameResponse::set_instanceuid(const char* value, size_t size) {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  instanceuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FrameResponse::mutable_instanceuid() {
  set_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    instanceuid_ = new ::std::string;
  }
  return instanceuid_;
}
inline ::std::string* FrameResponse::release_instanceuid() {
  clear_has_instanceuid();
  if (instanceuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = instanceuid_;
    instanceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 frameNumber = 14;
inline bool FrameResponse::has_framenumber() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FrameResponse::set_has_framenumber() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FrameResponse::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FrameResponse::clear_framenumber() {
  framenumber_ = 0u;
  clear_has_framenumber();
}
inline ::google::protobuf::uint32 FrameResponse::framenumber() const {
  return framenumber_;
}
inline void FrameResponse::set_framenumber(::google::protobuf::uint32 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// -------------------------------------------------------------------

// FrameFragmentHeader

// required uint32 offset = 1;
inline bool FrameFragmentHeader::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FrameFragmentHeader::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FrameFragmentHeader::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FrameFragmentHeader::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 FrameFragmentHeader::offset() const {
  return offset_;
}
inline void FrameFragmentHeader::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
}

// required uint32 size = 2;
inline bool FrameFragmentHeader::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FrameFragmentHeader::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FrameFragmentHeader::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FrameFragmentHeader::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 FrameFragmentHeader::size() const {
  return size_;
}
inline void FrameFragmentHeader::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::FrameResponse_bitDepth>() {
  return ::Protocol::FrameResponse_bitDepth_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_stream_2eproto__INCLUDED
