This project provides a Linux streaming server for full-resolution Dicom
image data. 

The code has been designed for speed and scalability.

Dependencies:
0) Boost threads
1) libev
2) libeio
3) iconv (this is needed by the Imbera  Dicom library, but will eventually be
  removed once a stripped-down version of Imebra is integrated)
4) Imebra Dicom toolkit: I have forked a version of this excellent toolkit
and put it on Github. It is included as a submodule of DicomStream. So, after
cloning this project, you must call:
$ git submodule init
$ git submodule update


Design:

0) map file name ==> {file descriptor, file name, parser, ref count}
   when ref count drops back to zero, we can close the file
1) socket accept callback: trigger socket read
2) socket read callback:  
   a) read and parse request message
   b) queue file prefetch on all files in request in prefetch thread
   c) create FrameGroupIterator with list of files (or single file, in the case of multi-frame)
      - iterator should be passed pointer to IFileRefCounter, and ParseListenManager
   d) iterators register as listeners for parse results for a given file
   
   [
   i) if iterator->needsFileOpen is true, trigger eio file open on returned file name
   ii) open callback: trigger readahead (16 K)
   iii) readahead callback: parse header, calculate pixel offsets, and notify listeners  
   ]
   
   e) trigger a write on the socket
   f) socket write callback: write fragment header, trigger eio sendfile on fragment (in 100K chunks)
   g) eio callback: trigger write on next fragment, or exit
      


