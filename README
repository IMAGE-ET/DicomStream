This project provides a Linux streaming server for full-resolution Dicom
pixel data. 

The code has been designed for speed and scalability.

Dependencies:
0) boost thread library (http://www.boost.org/)
1) libev - high perf event loop (http://software.schmorp.de/pkg/libev.html)
2) libeio - event based, fully asynchronous IO library (http://software.schmorp.de/pkg/libeio.html)
3) Imebra Dicom toolkit: I have forked a version of this excellent toolkit
and put it on Github. It is included as a submodule of DicomStream. 


After cloning this project, do the following:

A) set up git submodules

$ git submodule init
$ git submodule update


B) Install boost thread library

C) Install libev

D) Install libeio

////////////////////////////////////////////////////////////////////////


ToDo:

HIGH

- c# client 

- improve prefetch
   a) open all files
   b) on open, do readahead if parser doesn't exist
   c) on readahead, do fadvise 
   d) on fadvise, exit


- flesh out installation guide

- in a branch, trim down Imebra to bare essentials, to avoid code bloat

- increment file refcount when calling open, readahead, prefetch, etc. so that file is not
closed while these operations are in progress

- use EIO to close file. prolly need a flag to indicate file slated for open/close.
If we want to open a file that is slated for closing, we need to wait until close
callback to open. Likewise for closing a file that is slated for opening. Should post
on news group for this.

- improve error handling, check for leaks, decide when to close connection
 with client(FIN socket, etc)

- implement weighted round-robin strategy on queue of frame groups

- add Pantheios logging framework - replace printf statements







