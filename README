This project provides a Linux streaming server for full-resolution Dicom
image data. 

The code has been designed for speed and scalability.

Dependencies:
0) Boost threads
1) libev
2) libeio
3) Imebra Dicom toolkit: I have forked a version of this excellent toolkit
and put it on Github. It is included as a submodule of DicomStream. 


After cloning this project, do the following:

A) set up git submodules

$ git submodule init
$ git submodule update


B) Install boost

C) Install libev

D) Install libeio

////////////////////////////////////////////////////////////////////////


ToDo:

HIGH

- c# client 
- Viewer: a) use prefetch strategy for both synchronous and nonsynchronous fetch
          b) then, convert prefetch to DicomStreamer



- ipmprove prefetch
   a) open all files
   b) on open, do readahead if parser doesn't exist
   c) on readahead, do fadvise 
   d) on fadvise, exit



- handle message for change of primary index (stacking)


- flesh out installation guide

- in a branch, trim down Imebra to bare essentials, to avoid code bloat

- increment file refcount when calling open, readahead, prefetch, etc. so that file is not
closed while these operations are in progress

- use EIO to close file. prolly need a flag to indicate file slated for open/close.
If we want to open a file that is slated for closing, we need to wait until close
callback to open. Likewise for closing a file that is slated for opening. Should post
on news group for this.

- fix error handling, check for leaks, decide when to close connection with client

- handle FIN, etc.
- implement weighted round-robin strategy on queue of frame groups

- add Pantheios logging framework - replace printf statements







