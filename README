This project provides a Linux streaming server for full-resolution Dicom
image data. 

The code has been designed for speed and scalability.

Dependencies:
0) Boost threads
1) libev
2) libeio
3) iconv (this is needed by the Imbera  Dicom library, but will eventually be
  removed once a stripped-down version of Imebra is integrated)
4) Imebra Dicom toolkit: I have forked a version of this excellent toolkit
and put it on Github. It is included as a submodule of DicomStream. So, after
cloning this project, you must call:
$ git submodule init
$ git submodule update


Design:

0) map file name ==> {file descriptor, parser, ref count}
   when ref count drops back to zero, we can close the file
1) socket accept callback: trigger socket read
2) socket read callback:  
   a) read and parse request message
   b) queue file prefetch on all files in request
   c) create FrameGroupIterator with list of files (or single file, in the case of multi-frame)
      - iterator should be passed pointer to IFileRefCounter, and ParseListenManager
   d) iterators can register as listeners for parse results for a given file
   e) start iterating
   f) if iterator->needsFileOpen is true, trigger eio file open on returned file name
   g) open callback: trigger readahead (5 K)
   h) readahead callback: parse header, calculate pixel offsets, and notify listeners     
   i) really start iterating   
	   i) trigger socket write for file fragment
	   ii) socket write callback: write message, trigger eio sendfile on fragment
   j) next fragment
      


